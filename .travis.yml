os: linux

dist: xenial

language: go

services:
  - docker

sudo: required

env:
  global:
    - CGO_ENABLED=0 
    - GOFLAGS='-a -x' 
    - WORKSPACE='/project'

branches:
  except:
    - /^travis-.*-build$/
    
# go:
#   global:
#     - 1.12.x
#     - 1.3.x
matrix:
  include:
    # - go: 1.12.x
    #   env: GOOS2=linux GOARCH=amd64 DIST_FAMILY=RHEL DIST=rhel7 BIN=ercole-agent-absence-checker GO111MODULE=on PACKAGE_BUILD_IMAGE=sorintdev/rpmbuild-centos7
    # - go: 1.12.x
    #   env: GOOS2=linux GOARCH=amd64 DIST_FAMILY=RHEL DIST=rhel6 BIN=ercole-agent-absence-checker GO111MODULE=on PACKAGE_BUILD_IMAGE=sorintdev/rpmbuild-centos6
    - go: 1.13.x
      env: GOOS2=windows GOARCH=amd64 DIST_FAMILY=WIN DIST=win BIN=ercole-agent-absence-checker.exe GO111MODULE=on PACKAGE_BUILD_IMAGE=sorintdev/nsis

before_install:
  - sudo docker pull ${PACKAGE_BUILD_IMAGE}
  - if [ -z ${TRAVIS_TAG} ] || [[ ${TRAVIS_TAG} == *-* ]]; then export VERSION=latest; else export VERSION=${TRAVIS_TAG}; fi
  - echo ${TRAVIS_TAG}
  - echo ${VERSION}

install:
  - sudo docker run -d --rm -it -e WORKSPACE="${WORKSPACE}" -e TRAVIS_REPO_SLUG="${TRAVIS_REPO_SLUG}" -e TRAVIS_BUILD_NUMBER="${TRAVIS_BUILD_NUMBER}" -v $PWD:"${WORKSPACE}" --name package_builder ${PACKAGE_BUILD_IMAGE} /bin/cat
  - if [ $DIST == "rhel5" ]; then cp -r vendor/* ${GOPATH}/src/; fi
  - if [ $DIST == "rhel5" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && echo '%_topdir %(echo $HOME)/rpmbuild' > ~/.rpmmacros"; fi

script:
  - if [ $DIST == "rhel5" ]; then mkdir -p ${GOPATH}/src/github.com/ercole-io; fi
  - sed "s/\"latest\"/\"${VERSION}\"/" main.go > /tmp/main.go
  - cp /tmp/main.go main.go
  - GOOS=$GOOS2 go build -o ${BIN} main.go
  # - sed -i "s|ERCOLE_VERSION|${VERSION}|g" package/rhel7/ercole-agent-absence-checker.spec
  # - sed -i "s|ERCOLE_VERSION|${VERSION}|g" package/rhel6/ercole-agent-absence-checker.spec
  # - sed -i "s|ERCOLE_VERSION|${VERSION}|g" package/rhel5/ercole-agent-absence-checker.spec
  - sed -i "s|ERCOLE_VERSION|${VERSION}|g" package/win/installer.nsi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && rpmbuild --quiet -bl package/${DIST}/ercole-agent-absence-checker.spec" || echo rpmbuild; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "mkdir ~/rpmbuild/SOURCES/ercole-agent-absence-checker-${VERSION}"; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && cp -r * ~/rpmbuild/SOURCES/ercole-agent-absence-checker-${VERSION}/"; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && tar -C ~/rpmbuild/SOURCES -cvzf ~/rpmbuild/SOURCES/ercole-agent-absence-checker-${VERSION}.tar.gz ercole-agent-${VERSION}"; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && rpmbuild -bb package/${DIST}/ercole-agent-absence-checker.spec"; fi
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "find ~/rpmbuild/SOURCES/ercole-agent-absence-checker-${VERSION}"; fi
  - if [ $DIST_FAMILY == "WIN" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && makensis package/win/installer.nsi"; fi
  - mkdir dist
  - if [ $DIST_FAMILY == "RHEL" ]; then docker exec -it package_builder /bin/sh -c "cd ${WORKSPACE} && cp ~/rpmbuild/RPMS/x86_64/ercole-agent-absence-checker-${VERSION}-1.el*.x86_64.rpm dist/"; fi
  - if [ $DIST_FAMILY == "WIN" ]; then md5sum ercole-agent-absence-checker.exe; fi
  - if [ $DIST_FAMILY == "WIN" ]; then file ercole-agent-absence-checker.exe; fi
  - if [ $DIST_FAMILY == "WIN" ]; then cp ercole-agent-absence-checker-setup-${VERSION}.exe dist/; fi


after_success:
  - ls
  - file ${BIN}
  - env
  - ls dist
 
before_deploy:
  - if [[ ${VERSION} == "latest" ]]; then git tag -f latest; fi
  - if [[ ${VERSION} == "latest" ]]; then git remote add gh https://amreo:${GITHUB_RELEASE_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git; fi
  - if [[ ${VERSION} == "latest" ]]; then git push gh latest || true; fi
  - if [[ ${VERSION} == "latest" ]]; then git push -f gh latest; fi
  - if [[ ${VERSION} == "latest" ]]; then git remote remove gh; fi

deploy:
  provider: releases
  api_key: $GITHUB_RELEASE_TOKEN
  file_glob: true
  file: dist/*
  skip_cleanup: true
  name: $VERSION
  overwrite: true
  on:
    all_branches: true
